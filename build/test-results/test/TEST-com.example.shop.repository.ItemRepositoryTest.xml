<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="com.example.shop.repository.ItemRepositoryTest" tests="1" skipped="0" failures="0" errors="0" timestamp="2024-03-30T06:52:57" hostname="jinjaehyeog-ui-MacBookPro.local" time="1.35">
  <properties/>
  <testcase name="Querydsl 조회 테스트1" classname="com.example.shop.repository.ItemRepositoryTest" time="1.35"/>
  <system-out><![CDATA[15:52:50.834 [Test worker] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils -- Could not detect default configuration classes for test class [com.example.shop.repository.ItemRepositoryTest]: ItemRepositoryTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
15:52:51.015 [Test worker] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Found @SpringBootConfiguration com.example.shop.ShopApplication for test class com.example.shop.repository.ItemRepositoryTest

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v3.2.4)

2024-03-30T15:52:51.754+09:00  INFO 4056 --- [    Test worker] c.e.shop.repository.ItemRepositoryTest   : Starting ItemRepositoryTest using Java 17.0.8 with PID 4056 (started by jinjaehyck in /Users/jinjaehyck/ShoppingMall)
2024-03-30T15:52:51.757+09:00  INFO 4056 --- [    Test worker] c.e.shop.repository.ItemRepositoryTest   : No active profile set, falling back to 1 default profile: "default"
2024-03-30T15:52:52.674+09:00  INFO 4056 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-03-30T15:52:52.756+09:00  INFO 4056 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 67 ms. Found 1 JPA repository interface.
2024-03-30T15:52:53.383+09:00  INFO 4056 --- [    Test worker] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2024-03-30T15:52:53.488+09:00  INFO 4056 --- [    Test worker] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.4.4.Final
2024-03-30T15:52:53.542+09:00  INFO 4056 --- [    Test worker] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2024-03-30T15:52:53.950+09:00  INFO 4056 --- [    Test worker] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2024-03-30T15:52:54.000+09:00  INFO 4056 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2024-03-30T15:52:54.543+09:00  INFO 4056 --- [    Test worker] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@342a1f84
2024-03-30T15:52:54.546+09:00  INFO 4056 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2024-03-30T15:52:54.618+09:00  WARN 4056 --- [    Test worker] org.hibernate.orm.deprecation            : HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2024-03-30T15:52:54.620+09:00  WARN 4056 --- [    Test worker] org.hibernate.orm.deprecation            : HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2024-03-30T15:52:55.920+09:00  INFO 4056 --- [    Test worker] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
Hibernate: 
    drop table if exists item
Hibernate: 
    drop table if exists item_seq
Hibernate: 
    create table item (
        price integer not null,
        stock_number integer not null,
        item_id bigint not null,
        reg_time datetime(6),
        update_time datetime(6),
        item_nm varchar(50) not null,
        item_detail tinytext not null,
        item_sell_status enum ('SELL','SOLE_OUT'),
        primary key (item_id)
    ) engine=InnoDB
Hibernate: 
    create table item_seq (
        next_val bigint
    ) engine=InnoDB
Hibernate: 
    insert into item_seq values ( 1 )
2024-03-30T15:52:56.101+09:00  INFO 4056 --- [    Test worker] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-03-30T15:52:56.356+09:00  WARN 4056 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-03-30T15:52:57.076+09:00  INFO 4056 --- [    Test worker] o.s.d.j.r.query.QueryEnhancerFactory     : Hibernate is in classpath; If applicable, HQL parser will be used.
2024-03-30T15:52:57.915+09:00  INFO 4056 --- [    Test worker] c.e.shop.repository.ItemRepositoryTest   : Started ItemRepositoryTest in 6.621 seconds (process running for 8.529)
Hibernate: 
    select
        next_val as id_val 
    from
        item_seq for update
Hibernate: 
    update
        item_seq 
    set
        next_val= ? 
    where
        next_val=?
Hibernate: 
    insert 
    into
        item
        (item_detail, item_nm, item_sell_status, price, reg_time, stock_number, update_time, item_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        next_val as id_val 
    from
        item_seq for update
Hibernate: 
    update
        item_seq 
    set
        next_val= ? 
    where
        next_val=?
Hibernate: 
    insert 
    into
        item
        (item_detail, item_nm, item_sell_status, price, reg_time, stock_number, update_time, item_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        item
        (item_detail, item_nm, item_sell_status, price, reg_time, stock_number, update_time, item_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        item
        (item_detail, item_nm, item_sell_status, price, reg_time, stock_number, update_time, item_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        item
        (item_detail, item_nm, item_sell_status, price, reg_time, stock_number, update_time, item_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        item
        (item_detail, item_nm, item_sell_status, price, reg_time, stock_number, update_time, item_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        item
        (item_detail, item_nm, item_sell_status, price, reg_time, stock_number, update_time, item_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        item
        (item_detail, item_nm, item_sell_status, price, reg_time, stock_number, update_time, item_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        item
        (item_detail, item_nm, item_sell_status, price, reg_time, stock_number, update_time, item_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        item
        (item_detail, item_nm, item_sell_status, price, reg_time, stock_number, update_time, item_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        i1_0.item_id,
        i1_0.item_detail,
        i1_0.item_nm,
        i1_0.item_sell_status,
        i1_0.price,
        i1_0.reg_time,
        i1_0.stock_number,
        i1_0.update_time 
    from
        item i1_0 
    where
        i1_0.item_sell_status=? 
        and i1_0.item_detail like ? escape '!' 
    order by
        i1_0.price desc
Item(id=10, itemNm=테스트상품9, price=10009, stockNumber=100, itemDetail=테스트 상품 상세 설명9, itemSellStatus=SELL, regTime=2024-03-30T15:52:58.943855, updateTime=2024-03-30T15:52:58.943887)
Item(id=9, itemNm=테스트상품8, price=10008, stockNumber=100, itemDetail=테스트 상품 상세 설명8, itemSellStatus=SELL, regTime=2024-03-30T15:52:58.931456, updateTime=2024-03-30T15:52:58.931480)
Item(id=8, itemNm=테스트상품7, price=10007, stockNumber=100, itemDetail=테스트 상품 상세 설명7, itemSellStatus=SELL, regTime=2024-03-30T15:52:58.919453, updateTime=2024-03-30T15:52:58.919471)
Item(id=7, itemNm=테스트상품6, price=10006, stockNumber=100, itemDetail=테스트 상품 상세 설명6, itemSellStatus=SELL, regTime=2024-03-30T15:52:58.906852, updateTime=2024-03-30T15:52:58.906879)
Item(id=6, itemNm=테스트상품5, price=10005, stockNumber=100, itemDetail=테스트 상품 상세 설명5, itemSellStatus=SELL, regTime=2024-03-30T15:52:58.893445, updateTime=2024-03-30T15:52:58.893463)
Item(id=5, itemNm=테스트상품4, price=10004, stockNumber=100, itemDetail=테스트 상품 상세 설명4, itemSellStatus=SELL, regTime=2024-03-30T15:52:58.879828, updateTime=2024-03-30T15:52:58.879845)
Item(id=4, itemNm=테스트상품3, price=10003, stockNumber=100, itemDetail=테스트 상품 상세 설명3, itemSellStatus=SELL, regTime=2024-03-30T15:52:58.866646, updateTime=2024-03-30T15:52:58.866684)
Item(id=3, itemNm=테스트상품2, price=10002, stockNumber=100, itemDetail=테스트 상품 상세 설명2, itemSellStatus=SELL, regTime=2024-03-30T15:52:58.851789, updateTime=2024-03-30T15:52:58.851806)
Item(id=2, itemNm=테스트상품1, price=10001, stockNumber=100, itemDetail=테스트 상품 상세 설명1, itemSellStatus=SELL, regTime=2024-03-30T15:52:58.822097, updateTime=2024-03-30T15:52:58.822114)
Item(id=1, itemNm=테스트상품0, price=10000, stockNumber=100, itemDetail=테스트 상품 상세 설명0, itemSellStatus=SELL, regTime=2024-03-30T15:52:58.694289, updateTime=2024-03-30T15:52:58.694309)
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
